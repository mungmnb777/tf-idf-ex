문자열
String s = new String("bikini");
위의 코드는 String 인스턴스를 새로 생성한다.
String s = "bikini";
이 코드는 새로운 인스턴스를 생성하는 대신 하나의 인스턴스를 재사용한다.
JVM 스펙에서 문자열은 상수 풀에 저장한 후, 이후 같은 문자열을 다시 사용하려고 할 때 캐싱해서 사용하기 때문이다.
정규표현식
static boolean isRomanNumeralSlow(String s) {
    return s.matches("^(?=.)M*(C[MD]|D?C{0,3})"
            + "(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$");
}
// Reusing expensive object for improved performance (Page 23)
private static final Pattern ROMAN = Pattern.compile(
        "^(?=.)M*(C[MD]|D?C{0,3})"
                + "(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$");

static boolean isRomanNumeralFast(String s) {
    return ROMAN.matcher(s).matches();
}
Pattern 인스턴스를 매번 새로 생성하는 것(위의 코드)이 아니라 직접 생성(아래 코드)해 캐싱해두고 인스턴스를 재사용하면 성능을 개선할 수 있다.

→ Pattern 인스턴스를 컴파일하는 비용은 매우 비싸다.

→ 이 과정이 100번, 1000번 수행되면 CPU가 다른 작업을 하지 못하는 경우가 발생할 수 있다.

오토박싱
public class Sum {
    private static long sum() {
        Long sum = 0L;
        for (long i = 0; i <= Integer.MAX_VALUE; i++)
            sum += i;
        return sum;
    }

    public static void main(String[] args) {
        int numSets = Integer.parseInt(args[0]);
        long x = 0;

        for (int i = 0; i < numSets; i++) {
            long start = System.nanoTime();
            x += sum();
            long end = System.nanoTime();
            System.out.println((end - start) / 1_000_000. + " ms.");
        }

        // Prevents VM from optimizing away everything.
        if (x == 42)
            System.out.println();
    }
}
위의 sum() 메서드는 Integer.MAX_VALUE 횟수만큼 박싱이 일어난다.
책에서는 해당 메서드 수행이 6.3초가 걸렸다고 한다.
오토 박싱이 발생하지 않게 sum 변수를 기본 타입으로 변환시켜주었을 때는 0.59초가 걸렸다고 한다.
래퍼 타입보다는 기본 타입을 사용하고, 의도치 않은 오토박싱이 숨어들지 않게 주의하자.