이름을 가질 수 있다.
생성자를 사용하게 되면 하나의 시그니처로 생성자를 하나만 만들 수 있음
정적 팩토리 메서드는 이름이 있기에 시그니처가 같아도 이름을 달리 해주면 된다.
호출될 때마다 인스턴스를 새로 생성하지 않아도 된다.
생성을 통제해야 하는 경우가 있다. → 싱글턴처럼 딱 한번만 생성하게 하는 경우 등
플라이웨이트 패턴
https://refactoring.guru/ko/design-patterns/flyweight
객체를 재사용하는 방법.
자주 변하는 속성과 변하지 않는 속성을 분리하고 재사용한다.
반환 타입의 하위 타입 객체를 반환할 수 있는 능력이 있다.
입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.
정적 팩토리 메서드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다.
서비스 제공자 프레임워크
JDBC는 자바 6 전에 등장한 개념이라 ServiceLoader를 사용하지 않는다.
JDBC 4.0부터는 자동으로 드라이버를 초기화해준다.
단점
상속을 하려면 public이나 protected 생성자가 필요하니 정적 팩토리 메서드만 제공하면 하위 클래스를 만들 수 없다.
정적 팩토리 메서드는 프로그래머가 찾기 어렵다.
Java Docs는 생성자와 메서드 설명이 따로 되어있다. 따라서 생성자의 경우 API 설명에서 명확히 알 수 있지만, 생성자가 없고 정적 팩토리 메서드만 있다면 객체 생성을 어떻게 해야할 지 잘 모를 수 있다.

→ 따라서 정적 팩토리 메서드는 널리 알려진 규약을 사용하자.